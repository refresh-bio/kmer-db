name: Self-hosted CI

on:
  pull_request:
    branches: [ master, develop ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:

 ########################################################################################
  checkout:
    name: Checkout
    strategy:
      matrix:
        machine: [x64_linux, x64_mac, arm64_linux, arm64_mac]
    runs-on: [self-hosted, kmer-db, '${{ matrix.machine }}']
    
    steps:
    - name: clean
      run: rm -rf ${{ github.workspace }}/*
      
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    
########################################################################################
  make:
    name: Make
    needs: checkout
    strategy:
      fail-fast: false
      matrix:
        machine: [x64_linux, x64_mac, arm64_linux, arm64_mac]
        compiler: [11, 12, 13]
        include:
        - {machine: x64_linux, platform: avx2, compiler: 14}
        - {machine: x64_linux, platform: avx2}
        - {machine: arm64_linux, platform: arm8}
        - {machine: x64_mac, platform: avx2}
        - {machine: arm64_mac, platform: m1}
        exclude:
        - {machine: arm64_linux, compiler: 13}
        
    runs-on: [self-hosted, kmer-db, '${{ matrix.machine }}']  
        
    steps:
    - name: make (${{matrix.compiler}}, PLATFORM=${{ matrix.platform}})
      run: | 
        gmake -j32 CXX=g++-${{matrix.compiler}} CC=gcc-${{matrix.compiler}} PLATFORM=${{ matrix.platform }} STATIC_LINK=true
        cp ./bin/kmer-db ./kmer-db-${{matrix.compiler}}
        gmake clean
        
########################################################################################
  help:
    name: Print usage
    needs: make
    strategy:
      fail-fast: false
      matrix:
        machine: [x64_linux, x64_mac, arm64_linux, arm64_mac]
        compiler: [11, 12, 13]
        mode: [unknown_mode]
        exclude:
        - {machine: arm64_linux, compiler: 13}
        include:
        - {machine: x64_linux, compiler: 14, mode: all2all}
        - {machine: x64_linux, compiler: 14, mode: all2all-parts} 
        - {machine: x64_linux, compiler: 14, mode: all2all-sp} 
        - {machine: x64_linux, compiler: 14, mode: new2all} 
        - {machine: x64_linux, compiler: 14, mode: one2all} 
        - {machine: x64_linux, compiler: 14, mode: distance} 
        - {machine: x64_linux, compiler: 14, mode: minhash} 

    runs-on: [self-hosted, kmer-db, '${{ matrix.machine }}']
    
    env: 
      EXEC: ./kmer-db-${{matrix.compiler}}
        
    steps:
    - name: help (${{matrix.compiler}}, ${{matrix.mode}})
      run: ${EXEC} ${{matrix.mode}} -help
      
    - name: version (${{matrix.compiler}})
      run: ${EXEC} -version  


 ########################################################################################
  synth:
    name: Synthetic data
    needs: help
    strategy:
      fail-fast: false
      matrix:
        machine: [x64_linux, x64_mac, arm64_linux, arm64_mac]
        compiler: [11, 12, 13]
        include:
        - {machine: x64_linux, compiler: 14}
        exclude:
        - {machine: arm64_linux, compiler: 13}
   
    runs-on: [self-hosted, kmer-db, '${{ matrix.machine }}']

    env: 
      INPUT_DIR: ./test/synth
      EXEC: ./kmer-db-${{matrix.compiler}}
    steps:
          
    - name: build 
      run: |
        ${EXEC} build -multisample-fasta -k 21 ${INPUT_DIR}/synth.list synth.db
    
    - name: all2all (dense)
      run: |     
        ${EXEC} all2all synth.db a2a
        cmp ${INPUT_DIR}/a2a a2a
        
    - name: all2all (sparse)
      run: |
        ${EXEC} all2all -sparse synth.db a2a-sparse
        cmp ${INPUT_DIR}/a2a-sparse a2a-sparse
  
    - name: all2all (sparse + min/max)
      run: |
        ${EXEC} all2all -sparse -max 39 -min num-kmers:31 synth.db a2a-sparse-minmax
        cmp ${INPUT_DIR}/a2a.sparse.above-below a2a-sparse-minmax
        
    - name: all2all-sp
      run: | 
        ${EXEC} all2all-sp synth.db a2a-sp
        cat a2a-sp
        cmp ${INPUT_DIR}/a2a-sparse a2a-sp

    
    - name: all2all-sp (min/max)
      run: | 
        ${EXEC} all2all-sp -max 39 -min num-kmers:31 synth.db a2a-sp.minmax
        cmp ${INPUT_DIR}/a2a.sparse.above-below a2a-sp.minmax   
    
    - name: all2all distances (dense -> dense)
      run: |
        ${EXEC} distance mash a2a a2a.mash
        ${EXEC} distance ani a2a a2a.ani
        cmp ${INPUT_DIR}/a2a.ani a2a.ani
        cmp ${INPUT_DIR}/a2a.mash a2a.mash
        
    - name: all2all distances (dense -> sparse)
      run: |
        ${EXEC} distance -sparse  ani a2a a2a.ani-sparse
        ${EXEC} distance -sparse -max 1.0 -min -1.0 mash a2a a2a.mash-sparse
        cmp ${INPUT_DIR}/a2a-sparse.ani a2a.ani-sparse
        cmp ${INPUT_DIR}/a2a-sparse.mash a2a.mash-sparse
        
    - name: all2all distances (sparse -> sparse)
      run: |
        ${EXEC} distance mash a2a-sparse a2a-sparse.mash
        ${EXEC} distance ani a2a-sparse a2a-sparse.ani
        cmp ${INPUT_DIR}/a2a-sparse.mash a2a-sparse.mash
        cmp ${INPUT_DIR}/a2a-sparse.ani a2a-sparse.ani
 
    - name: all2all distances (sparse -> sparse + min/max)
      run: |
        ${EXEC} distance -sparse mash -min 0.03 -max mash:1.0 a2a-sparse a2a-sparse.mash-sparse
        cmp ${INPUT_DIR}/a2a.mash.above-below a2a-sparse.mash-sparse
        
    - name: all2all distances (dense -> sparse + double min/max)
      run: |
        ${EXEC} distance -sparse -min 0.03 -max mash:1.0 -min num-kmers:36 mash a2a a2a.mash-sparse-min2max
        cmp ${INPUT_DIR}/a2a.mash-sparse-min2max a2a.mash-sparse-min2max
         
    - name: new2all (dense)
      run: |
        ${EXEC} new2all -multisample-fasta synth.db ${INPUT_DIR}/synth.list n2a
        cmp ${INPUT_DIR}/n2a n2a

    - name: new2all (sparse)
      run: |
        ${EXEC} new2all -multisample-fasta -sparse synth.db ${INPUT_DIR}/synth.list n2a-sparse 
        cmp ${INPUT_DIR}/n2a-sparse n2a-sparse        

    - name: new2all (sparse + min/max)
      run: |
        ${EXEC} new2all -multisample-fasta -sparse -max 69 -min num-kmers:21 synth.db ${INPUT_DIR}/synth.list n2a-sparse-minmax
        cmp ${INPUT_DIR}/n2a.sparse.above-below n2a-sparse-minmax
            
    - name: new2all distances (dense -> dense)
      run: |
        ${EXEC} distance mash n2a n2a.mash
         ${EXEC} distance ani n2a n2a.ani
        cmp ${INPUT_DIR}/n2a.ani n2a.ani
        cmp ${INPUT_DIR}/n2a.mash n2a.mash
        
    - name: new2all distances (dense -> sparse)
      run: |
        ${EXEC} distance -sparse ani n2a n2a.ani-sparse
        ${EXEC} distance -sparse -max 1.0 -min -1.0 mash n2a n2a.mash-sparse
        cmp ${INPUT_DIR}/n2a-sparse.ani n2a.ani-sparse
        cmp ${INPUT_DIR}/n2a-sparse.mash n2a.mash-sparse
        
    - name: new2all distances (sparse -> sparse)
      run: |
        ${EXEC} distance mash n2a-sparse n2a-sparse.mash-sparse
        ${EXEC} distance ani n2a-sparse n2a-sparse.ani-sparse
        cmp ${INPUT_DIR}/n2a-sparse.mash n2a-sparse.mash-sparse
        cmp ${INPUT_DIR}/n2a-sparse.ani n2a-sparse.ani-sparse
        
   
    
      
    
  ########################################################################################
  main:
    name: Virus data
    needs: synth
    strategy:
      fail-fast: false
      matrix:
        machine: [x64_linux, x64_mac, arm64_linux, arm64_mac]
        compiler: [11, 12, 13]
        threads: [1, 2, 16]
        include:
        - {machine: x64_linux, compiler: 14, threads: 1}
        - {machine: x64_linux, compiler: 14, threads: 2}
        - {machine: x64_linux, compiler: 14, threads: 16}
        exclude:
        - {machine: arm64_linux, compiler: 13}
     

    runs-on: [self-hosted, kmer-db, '${{ matrix.machine }}']
    
    env: 
      INPUT_DIR: ./test/virus
      EXEC: ./kmer-db-${{matrix.compiler}}
 
    steps:
    
    - name: build 
      run: |
        ${EXEC} build -t ${{matrix.threads}} ${INPUT_DIR}/seqs.part1.list k18.parts.db
   
    - name: new2all 
      run: |
        ${EXEC} new2all -t ${{matrix.threads}} k18.parts.db ${INPUT_DIR}/seqs.part2.list k18.n2a.csv
        cmp k18.n2a.csv ${INPUT_DIR}/k18.n2a.csv
        
    - name: new2all (sparse)
      run: |
        ${EXEC} new2all -t ${{matrix.threads}} -sparse k18.parts.db ${INPUT_DIR}/seqs.part2.list k18.n2a.sparse.csv
        cmp k18.n2a.sparse.csv ${INPUT_DIR}/k18.n2a.sparse.csv
    
    - name: extend  
      run: |     
        ${EXEC} build -t ${{matrix.threads}} -extend -k 25 ${INPUT_DIR}/seqs.part2.list k18.parts.db
        
    - name: all2all  
      run: |     
        ${EXEC} all2all -t ${{matrix.threads}} k18.parts.db k18.csv
        cmp k18.csv ${INPUT_DIR}/k18.csv
        
    - name: all2all (sparse)
      run: |     
        ${EXEC} all2all -t ${{matrix.threads}} -sparse k18.parts.db k18.sparse.csv
        cmp k18.sparse.csv ${INPUT_DIR}/k18.sparse.csv
        
    - name: distance
      run: | 
        ${EXEC} distance jaccard k18.csv k18.csv.jaccard
        ${EXEC} distance min k18.csv k18.csv.min
        ${EXEC} distance max k18.csv k18.csv.max
        ${EXEC} distance cosine k18.csv k18.csv.cosine
        ${EXEC} distance mash k18.csv k18.csv.mash
        cmp k18.csv.jaccard ${INPUT_DIR}/k18.csv.jaccard
        cmp k18.csv.min ${INPUT_DIR}/k18.csv.min
        cmp k18.csv.max ${INPUT_DIR}/k18.csv.max
        cmp k18.csv.cosine ${INPUT_DIR}/k18.csv.cosine
        cmp k18.csv.mash ${INPUT_DIR}/k18.csv.mash
        
    - name: build (default k) + all2all 
      run: |
        ${EXEC} build -t ${{matrix.threads}} ${INPUT_DIR}/seqs.list k18.db
        ${EXEC} all2all -t ${{matrix.threads}} k18.db k18.csv
        cmp k18.csv ${INPUT_DIR}/k18.csv
        
    - name: build (default k, multifasta) + all2all 
      run: |
        ${EXEC} build -t ${{matrix.threads}} -multisample-fasta ${INPUT_DIR}/multi.list k18.multi.db
        ${EXEC} all2all -t ${{matrix.threads}} k18.multi.db k18.multi.csv
        cmp k18.multi.csv ${INPUT_DIR}/k18.csv

    - name: build (default k, 2 x multifasta) + all2all 
      run: |
        ${EXEC} build -t ${{matrix.threads}} -multisample-fasta ${INPUT_DIR}/multi.split.list k18.multi.split.db
        ${EXEC} all2all -t ${{matrix.threads}} k18.multi.split.db k18.multi.split.csv
        cmp k18.multi.split.csv ${INPUT_DIR}/k18.csv
    
    - name: build (default k) + extend + all2all 
      run: |
        ${EXEC} build -t ${{matrix.threads}} ${INPUT_DIR}/seqs.part1.list k18.parts.db
        ${EXEC} build -t ${{matrix.threads}} -extend -k 25 ${INPUT_DIR}/seqs.part2.list k18.parts.db
        ${EXEC} all2all -t ${{matrix.threads}} k18.parts.db k18.parts.csv
        cmp k18.parts.csv ${INPUT_DIR}/k18.csv
        
    - name: build (default k, fraction 0.1) + all2all 
      run: |    
        ${EXEC} build -t ${{matrix.threads}} -f 0.1 ${INPUT_DIR}/seqs.list k18.frac.db
        ${EXEC} all2all -t ${{matrix.threads}} k18.frac.db k18.frac.csv
        cmp k18.frac.csv ${INPUT_DIR}/k18.frac.csv

    - name: minhash (default k, fraction 0.1) + build + all2all 
      run: |
        ${EXEC} minhash -f 0.1 ${INPUT_DIR}/seqs.list
        ${EXEC} build -t ${{matrix.threads}} -from-minhash ${INPUT_DIR}/seqs.list k18.minhash.db
        ${EXEC} all2all -t ${{matrix.threads}} k18.minhash.db k18.minhash.csv
        cmp k18.minhash.csv ${INPUT_DIR}/k18.frac.csv
        
    - name: build (k=24) + all2all 
      run: |
        ${EXEC} build -t ${{matrix.threads}} -k 24 ${INPUT_DIR}/seqs.list k24.db
        ${EXEC} all2all -t ${{matrix.threads}} k24.db k24.csv
        cmp k24.csv ${INPUT_DIR}/k24.csv
        
    - name: build (k=25, f=0.1) + one2all 
      run: |
        ${EXEC} build -t ${{matrix.threads}} -k 25 -f 0.1 ${INPUT_DIR}/seqs.part1.list k25.db
        ${EXEC} one2all -t ${{matrix.threads}} k25.db ${INPUT_DIR}/data/MT159713 MT159713.csv
        cmp MT159713.csv ${INPUT_DIR}/MT159713.csv    
        
    - name: new2all (against itself)
      run: |
        ${EXEC} new2all -t ${{matrix.threads}} k18.db ${INPUT_DIR}/seqs.list k18.n2a.itself.csv
        cmp k18.n2a.itself.csv ${INPUT_DIR}/k18.n2a.itself.csv
        
    - name: all2all (parts)
      run: |
        ${EXEC} build -t ${{matrix.threads}} ${INPUT_DIR}/seqs.part1.list k18.parts1.db
        ${EXEC} build -t ${{matrix.threads}} ${INPUT_DIR}/seqs.part2.list k18.parts2.db
        echo 'k18.parts1.db' > db.list
        echo 'k18.parts2.db' >> db.list
        ${EXEC} all2all-parts -t ${{matrix.threads}} db.list k18.parts.csv
        cmp k18.parts.csv ${INPUT_DIR}/k18.sparse.csv


   
 
